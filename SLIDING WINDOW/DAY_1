
ON DAY_1 I LEARN ABOUT SLIDING WINDOW


1----->LONGEST SUBSTRING WITHOUT REPEATING CHARACTER
<--------BRUTE FORCE------>

for(int i=0;I<n;i++){
hash[255]={0};
for(j=i;j<n;j++){
if(hash[j]==1) break;
}
else{
len=j-i+1;
maxlen=max(maxlen,len);
hash[s[j]]=i;
}


time complexity===o(n^2)
space complexity===0(255);

optimes approach --1
class Solution {
public:
    int lengthOfLongestSubstring(string s) {
        vector<int> hash(255,-1);
        int left=0,right=0;
        int n=s.length();
        int len=0;
        while(right<n){
            if(hash[s[right]]!=-1){
                left=max(hash[s[right]]+1,left);
            }
            hash[s[right]]=right;
            len=max(len,right-left+1);
            right++;
        }
        return len;
    }
};

time complexity-==o(n);
space complexity===0(255);







2------->max consecutive ones-------------------------------->
Brute Force---->
class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int maxlen=0;
        for(int i=0;i<nums.size();i++){
            int zero=0;
            int len=0;
            for(int j=i;j<nums.size();j++){
                if(nums[j]==0){
                    zero++;
                }
                if(zero<=k){
                    len=j-i+1;
                    maxlen=max(len,maxlen);
                }
                else{
                    break;
                }
            }
        }
        return maxlen;
    }
};
T.C===O(N^2)


bettter Approach------------------------------------------>
class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int maxlen=0,l=0,r=0,zeroes=0;
        while(r<nums.size()){
            if(nums[r]==0){
                zeroes++;
            }
            while(zeroes>k){
                if(nums[l]==0){
                    zeroes--;
                }
                   l++;
            }
            if(zeroes<=k){
                int len=r-l+1;
                maxlen=max(len,maxlen);
            }
            r++;
        }
        return maxlen;
    }
};

T.C=o(2*n);



Optimised


class Solution {
public:
    int longestOnes(vector<int>& nums, int k) {
        int maxlen=0,l=0,r=0,zeroes=0;
       while(r<nums.size()){
        if(nums[r]==0) zeroes++;
        if(zeroes>k){
            if(nums[l]==0){
                zeroes--;
            }
            l++;
        }
        if(zeroes<=k){
            int len=r-l+1;
            maxlen=max(maxlen,len);
        }
        r++;
       }
       return maxlen;
    }
};


T.C--->O(N);
S.C---->O(1)---->IN ALL 3 CASES
